#!/usr/bin/perl

use strict;
use warnings;

use List::Util qw(min max);

my $minteeth = 5;
my $maxteeth = 31;
my $margin = 5; # number of teeth margin required to clear the tooth height
my $numgears = 4;

my @big = (1)x$numgears;
my @small = (1)x$numgears;

dfs(0,1,7);

sub dfs {
    my ($gearnum, $reduction, $driving) = @_;

    if ($gearnum == $numgears) {
        # a gear must exist with a bigger big than 4's + margin, and opposite parity, and small wheel not crashing
        return unless ($big[0] > $big[3]+$margin && $small[0]+$margin < $big[3]) || ($big[2] > $big[3]+$margin && $small[2]+$margin < $big[3]); # 4 gears

        # a gear must exist with equal big to 1's big, but opposite parity
        return unless $big[1] == $big[0] || $big[3] == $big[0]; # 4 gears

        my $gears = "(" . join(', ', map { "{$big[$_],$small[$_]}"} (0..$numgears-1)) . ")";
        my $spacing = join(',', map { $small[$_-1]+$big[$_] } (1..$numgears-1));
        print "$gears: reduction: $reduction:1; spacing: $spacing\n";
        return;
    }
    
    for my $big ($minteeth+$margin .. $maxteeth) {
        print "$big...\n" if $gearnum == 0;
        for my $small (max($minteeth, $gearnum == 0 ? 0 : ($small[$gearnum-1]+$big)-($big[$gearnum-1]+$margin)) .. $big-$margin) {
            $big[$gearnum] = $big;
            $small[$gearnum] = $small;

            next if $gearnum > 0 && $small[$gearnum-1]+$big[$gearnum] < $big[$gearnum-1]+$small[$gearnum]+$margin; # check that gears won't mesh where not wanted

            dfs($gearnum+1, $reduction*($big/$driving), $small);
        }
    }
}
